// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: cyclops.proto

package cyclops

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CyclopsClient is the client API for Cyclops service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CyclopsClient interface {
	SyncEntity(ctx context.Context, in *CyclopsRequest, opts ...grpc.CallOption) (*CyclopsResponse, error)
}

type cyclopsClient struct {
	cc grpc.ClientConnInterface
}

func NewCyclopsClient(cc grpc.ClientConnInterface) CyclopsClient {
	return &cyclopsClient{cc}
}

func (c *cyclopsClient) SyncEntity(ctx context.Context, in *CyclopsRequest, opts ...grpc.CallOption) (*CyclopsResponse, error) {
	out := new(CyclopsResponse)
	err := c.cc.Invoke(ctx, "/Cyclops/SyncEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CyclopsServer is the server API for Cyclops service.
// All implementations must embed UnimplementedCyclopsServer
// for forward compatibility
type CyclopsServer interface {
	SyncEntity(context.Context, *CyclopsRequest) (*CyclopsResponse, error)
	mustEmbedUnimplementedCyclopsServer()
}

// UnimplementedCyclopsServer must be embedded to have forward compatible implementations.
type UnimplementedCyclopsServer struct {
}

func (UnimplementedCyclopsServer) SyncEntity(context.Context, *CyclopsRequest) (*CyclopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncEntity not implemented")
}
func (UnimplementedCyclopsServer) mustEmbedUnimplementedCyclopsServer() {}

// UnsafeCyclopsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CyclopsServer will
// result in compilation errors.
type UnsafeCyclopsServer interface {
	mustEmbedUnimplementedCyclopsServer()
}

func RegisterCyclopsServer(s grpc.ServiceRegistrar, srv CyclopsServer) {
	s.RegisterService(&Cyclops_ServiceDesc, srv)
}

func _Cyclops_SyncEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CyclopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CyclopsServer).SyncEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cyclops/SyncEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CyclopsServer).SyncEntity(ctx, req.(*CyclopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cyclops_ServiceDesc is the grpc.ServiceDesc for Cyclops service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cyclops_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Cyclops",
	HandlerType: (*CyclopsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncEntity",
			Handler:    _Cyclops_SyncEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cyclops.proto",
}
