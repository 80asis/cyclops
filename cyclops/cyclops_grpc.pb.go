// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: cyclops.proto

package cyclops

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CyclopsRpcSvcClient is the client API for CyclopsRpcSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CyclopsRpcSvcClient interface {
	ExecuteEntitySync(ctx context.Context, in *ExecuteEntitySyncArg, opts ...grpc.CallOption) (*ExecuteEntitySyncRet, error)
	TriggerEntitySync(ctx context.Context, in *TriggerEntitySyncArg, opts ...grpc.CallOption) (*TriggerEntitySyncRet, error)
	TriggerEntitySyncAZ(ctx context.Context, in *TriggerEntitySyncAZArg, opts ...grpc.CallOption) (*TriggerEntitySyncAZRet, error)
}

type cyclopsRpcSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCyclopsRpcSvcClient(cc grpc.ClientConnInterface) CyclopsRpcSvcClient {
	return &cyclopsRpcSvcClient{cc}
}

func (c *cyclopsRpcSvcClient) ExecuteEntitySync(ctx context.Context, in *ExecuteEntitySyncArg, opts ...grpc.CallOption) (*ExecuteEntitySyncRet, error) {
	out := new(ExecuteEntitySyncRet)
	err := c.cc.Invoke(ctx, "/CyclopsRpcSvc/ExecuteEntitySync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyclopsRpcSvcClient) TriggerEntitySync(ctx context.Context, in *TriggerEntitySyncArg, opts ...grpc.CallOption) (*TriggerEntitySyncRet, error) {
	out := new(TriggerEntitySyncRet)
	err := c.cc.Invoke(ctx, "/CyclopsRpcSvc/TriggerEntitySync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cyclopsRpcSvcClient) TriggerEntitySyncAZ(ctx context.Context, in *TriggerEntitySyncAZArg, opts ...grpc.CallOption) (*TriggerEntitySyncAZRet, error) {
	out := new(TriggerEntitySyncAZRet)
	err := c.cc.Invoke(ctx, "/CyclopsRpcSvc/TriggerEntitySyncAZ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CyclopsRpcSvcServer is the server API for CyclopsRpcSvc service.
// All implementations must embed UnimplementedCyclopsRpcSvcServer
// for forward compatibility
type CyclopsRpcSvcServer interface {
	ExecuteEntitySync(context.Context, *ExecuteEntitySyncArg) (*ExecuteEntitySyncRet, error)
	TriggerEntitySync(context.Context, *TriggerEntitySyncArg) (*TriggerEntitySyncRet, error)
	TriggerEntitySyncAZ(context.Context, *TriggerEntitySyncAZArg) (*TriggerEntitySyncAZRet, error)
	mustEmbedUnimplementedCyclopsRpcSvcServer()
}

// UnimplementedCyclopsRpcSvcServer must be embedded to have forward compatible implementations.
type UnimplementedCyclopsRpcSvcServer struct {
}

func (UnimplementedCyclopsRpcSvcServer) ExecuteEntitySync(context.Context, *ExecuteEntitySyncArg) (*ExecuteEntitySyncRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteEntitySync not implemented")
}
func (UnimplementedCyclopsRpcSvcServer) TriggerEntitySync(context.Context, *TriggerEntitySyncArg) (*TriggerEntitySyncRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerEntitySync not implemented")
}
func (UnimplementedCyclopsRpcSvcServer) TriggerEntitySyncAZ(context.Context, *TriggerEntitySyncAZArg) (*TriggerEntitySyncAZRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerEntitySyncAZ not implemented")
}
func (UnimplementedCyclopsRpcSvcServer) mustEmbedUnimplementedCyclopsRpcSvcServer() {}

// UnsafeCyclopsRpcSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CyclopsRpcSvcServer will
// result in compilation errors.
type UnsafeCyclopsRpcSvcServer interface {
	mustEmbedUnimplementedCyclopsRpcSvcServer()
}

func RegisterCyclopsRpcSvcServer(s grpc.ServiceRegistrar, srv CyclopsRpcSvcServer) {
	s.RegisterService(&CyclopsRpcSvc_ServiceDesc, srv)
}

func _CyclopsRpcSvc_ExecuteEntitySync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteEntitySyncArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CyclopsRpcSvcServer).ExecuteEntitySync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CyclopsRpcSvc/ExecuteEntitySync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CyclopsRpcSvcServer).ExecuteEntitySync(ctx, req.(*ExecuteEntitySyncArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CyclopsRpcSvc_TriggerEntitySync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerEntitySyncArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CyclopsRpcSvcServer).TriggerEntitySync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CyclopsRpcSvc/TriggerEntitySync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CyclopsRpcSvcServer).TriggerEntitySync(ctx, req.(*TriggerEntitySyncArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CyclopsRpcSvc_TriggerEntitySyncAZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerEntitySyncAZArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CyclopsRpcSvcServer).TriggerEntitySyncAZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CyclopsRpcSvc/TriggerEntitySyncAZ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CyclopsRpcSvcServer).TriggerEntitySyncAZ(ctx, req.(*TriggerEntitySyncAZArg))
	}
	return interceptor(ctx, in, info, handler)
}

// CyclopsRpcSvc_ServiceDesc is the grpc.ServiceDesc for CyclopsRpcSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CyclopsRpcSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CyclopsRpcSvc",
	HandlerType: (*CyclopsRpcSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteEntitySync",
			Handler:    _CyclopsRpcSvc_ExecuteEntitySync_Handler,
		},
		{
			MethodName: "TriggerEntitySync",
			Handler:    _CyclopsRpcSvc_TriggerEntitySync_Handler,
		},
		{
			MethodName: "TriggerEntitySyncAZ",
			Handler:    _CyclopsRpcSvc_TriggerEntitySyncAZ_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cyclops.proto",
}
