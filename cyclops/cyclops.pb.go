// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: cyclops.proto

package cyclops

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EntitySyncEntityType_Type int32

const (
	EntitySyncEntityType_kCategory       EntitySyncEntityType_Type = 0
	EntitySyncEntityType_kProtectionRule EntitySyncEntityType_Type = 1
	EntitySyncEntityType_kRecoveryPlan   EntitySyncEntityType_Type = 2
	EntitySyncEntityType_kFlowPolicy     EntitySyncEntityType_Type = 3
	EntitySyncEntityType_kFlowSyncJob    EntitySyncEntityType_Type = 4
	EntitySyncEntityType_kAddressGroup   EntitySyncEntityType_Type = 5
	EntitySyncEntityType_kServiceGroup   EntitySyncEntityType_Type = 6
)

// Enum value maps for EntitySyncEntityType_Type.
var (
	EntitySyncEntityType_Type_name = map[int32]string{
		0: "kCategory",
		1: "kProtectionRule",
		2: "kRecoveryPlan",
		3: "kFlowPolicy",
		4: "kFlowSyncJob",
		5: "kAddressGroup",
		6: "kServiceGroup",
	}
	EntitySyncEntityType_Type_value = map[string]int32{
		"kCategory":       0,
		"kProtectionRule": 1,
		"kRecoveryPlan":   2,
		"kFlowPolicy":     3,
		"kFlowSyncJob":    4,
		"kAddressGroup":   5,
		"kServiceGroup":   6,
	}
)

func (x EntitySyncEntityType_Type) Enum() *EntitySyncEntityType_Type {
	p := new(EntitySyncEntityType_Type)
	*p = x
	return p
}

func (x EntitySyncEntityType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntitySyncEntityType_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cyclops_proto_enumTypes[0].Descriptor()
}

func (EntitySyncEntityType_Type) Type() protoreflect.EnumType {
	return &file_cyclops_proto_enumTypes[0]
}

func (x EntitySyncEntityType_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntitySyncEntityType_Type.Descriptor instead.
func (EntitySyncEntityType_Type) EnumDescriptor() ([]byte, []int) {
	return file_cyclops_proto_rawDescGZIP(), []int{0, 0}
}

// Sync operation type.
type EntitySyncEntityInfo_SyncOperationType int32

const (
	EntitySyncEntityInfo_kUpdate     EntitySyncEntityInfo_SyncOperationType = 0
	EntitySyncEntityInfo_kDelete     EntitySyncEntityInfo_SyncOperationType = 1
	EntitySyncEntityInfo_kSoftDelete EntitySyncEntityInfo_SyncOperationType = 2
)

// Enum value maps for EntitySyncEntityInfo_SyncOperationType.
var (
	EntitySyncEntityInfo_SyncOperationType_name = map[int32]string{
		0: "kUpdate",
		1: "kDelete",
		2: "kSoftDelete",
	}
	EntitySyncEntityInfo_SyncOperationType_value = map[string]int32{
		"kUpdate":     0,
		"kDelete":     1,
		"kSoftDelete": 2,
	}
)

func (x EntitySyncEntityInfo_SyncOperationType) Enum() *EntitySyncEntityInfo_SyncOperationType {
	p := new(EntitySyncEntityInfo_SyncOperationType)
	*p = x
	return p
}

func (x EntitySyncEntityInfo_SyncOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntitySyncEntityInfo_SyncOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_cyclops_proto_enumTypes[1].Descriptor()
}

func (EntitySyncEntityInfo_SyncOperationType) Type() protoreflect.EnumType {
	return &file_cyclops_proto_enumTypes[1]
}

func (x EntitySyncEntityInfo_SyncOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntitySyncEntityInfo_SyncOperationType.Descriptor instead.
func (EntitySyncEntityInfo_SyncOperationType) EnumDescriptor() ([]byte, []int) {
	return file_cyclops_proto_rawDescGZIP(), []int{3, 0}
}

// State of the entity i.e. kComplete, kError etc.
// Required for intentful entities. Dependent entities need to derive their
// status from the entities using them.
type EntitySyncEntityInfo_EntityState int32

const (
	// Entity is in stable state. EntitySync will sync only those entities
	// which are in this state.
	EntitySyncEntityInfo_kComplete EntitySyncEntityInfo_EntityState = 0
	// Entity is in error state.
	EntitySyncEntityInfo_kError EntitySyncEntityInfo_EntityState = 1
	// Entity is being modified.
	EntitySyncEntityInfo_kPending EntitySyncEntityInfo_EntityState = 2
	// Entity is in unknown state.
	EntitySyncEntityInfo_kUnknown EntitySyncEntityInfo_EntityState = 3
	// Entity Sync has to skip the entity. Plugins can set the state to this
	// value even if the entity is in stable state(kComplete) to avoid getting
	// the entity either synced or deleted based on their custom logic.
	EntitySyncEntityInfo_kSkip EntitySyncEntityInfo_EntityState = 4
)

// Enum value maps for EntitySyncEntityInfo_EntityState.
var (
	EntitySyncEntityInfo_EntityState_name = map[int32]string{
		0: "kComplete",
		1: "kError",
		2: "kPending",
		3: "kUnknown",
		4: "kSkip",
	}
	EntitySyncEntityInfo_EntityState_value = map[string]int32{
		"kComplete": 0,
		"kError":    1,
		"kPending":  2,
		"kUnknown":  3,
		"kSkip":     4,
	}
)

func (x EntitySyncEntityInfo_EntityState) Enum() *EntitySyncEntityInfo_EntityState {
	p := new(EntitySyncEntityInfo_EntityState)
	*p = x
	return p
}

func (x EntitySyncEntityInfo_EntityState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntitySyncEntityInfo_EntityState) Descriptor() protoreflect.EnumDescriptor {
	return file_cyclops_proto_enumTypes[2].Descriptor()
}

func (EntitySyncEntityInfo_EntityState) Type() protoreflect.EnumType {
	return &file_cyclops_proto_enumTypes[2]
}

func (x EntitySyncEntityInfo_EntityState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntitySyncEntityInfo_EntityState.Descriptor instead.
func (EntitySyncEntityInfo_EntityState) EnumDescriptor() ([]byte, []int) {
	return file_cyclops_proto_rawDescGZIP(), []int{3, 1}
}

// Allowed Entity Types.
// Add a new Entity type here if required.
type EntitySyncEntityType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EntitySyncEntityType) Reset() {
	*x = EntitySyncEntityType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cyclops_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntitySyncEntityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitySyncEntityType) ProtoMessage() {}

func (x *EntitySyncEntityType) ProtoReflect() protoreflect.Message {
	mi := &file_cyclops_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitySyncEntityType.ProtoReflect.Descriptor instead.
func (*EntitySyncEntityType) Descriptor() ([]byte, []int) {
	return file_cyclops_proto_rawDescGZIP(), []int{0}
}

// EntitySync Entity.
type EntitySyncEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the entity across sync sites. It could be either a
	// name or a UUID.
	Uid *string `protobuf:"bytes,1,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	// Entity Type.
	EntityType *EntitySyncEntityType_Type `protobuf:"varint,2,opt,name=entity_type,json=entityType,proto3,enum=EntitySyncEntityType_Type,oneof" json:"entity_type,omitempty"`
}

func (x *EntitySyncEntity) Reset() {
	*x = EntitySyncEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cyclops_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntitySyncEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitySyncEntity) ProtoMessage() {}

func (x *EntitySyncEntity) ProtoReflect() protoreflect.Message {
	mi := &file_cyclops_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitySyncEntity.ProtoReflect.Descriptor instead.
func (*EntitySyncEntity) Descriptor() ([]byte, []int) {
	return file_cyclops_proto_rawDescGZIP(), []int{1}
}

func (x *EntitySyncEntity) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *EntitySyncEntity) GetEntityType() EntitySyncEntityType_Type {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return EntitySyncEntityType_kCategory
}

type TaskRequestContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of task for idempotence.
	Uuid []byte `protobuf:"bytes,1,opt,name=uuid,proto3,oneof" json:"uuid,omitempty"`
	// Parent task. This should NOT be set by a client. It is solely meant to
	// be set internally by task implementations.
	ParentTaskUuid []byte `protobuf:"bytes,2,opt,name=parent_task_uuid,json=parentTaskUuid,proto3,oneof" json:"parent_task_uuid,omitempty"`
	// Only set when parent_task_uuid is set.
	SubtaskSequenceId *uint64 `protobuf:"varint,3,opt,name=subtask_sequence_id,json=subtaskSequenceId,proto3,oneof" json:"subtask_sequence_id,omitempty"`
	// Whether the task should be an internal task.
	IsInternalTask *bool `protobuf:"varint,4,opt,name=is_internal_task,json=isInternalTask,proto3,oneof" json:"is_internal_task,omitempty"`
}

func (x *TaskRequestContext) Reset() {
	*x = TaskRequestContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cyclops_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRequestContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRequestContext) ProtoMessage() {}

func (x *TaskRequestContext) ProtoReflect() protoreflect.Message {
	mi := &file_cyclops_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRequestContext.ProtoReflect.Descriptor instead.
func (*TaskRequestContext) Descriptor() ([]byte, []int) {
	return file_cyclops_proto_rawDescGZIP(), []int{2}
}

func (x *TaskRequestContext) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *TaskRequestContext) GetParentTaskUuid() []byte {
	if x != nil {
		return x.ParentTaskUuid
	}
	return nil
}

func (x *TaskRequestContext) GetSubtaskSequenceId() uint64 {
	if x != nil && x.SubtaskSequenceId != nil {
		return *x.SubtaskSequenceId
	}
	return 0
}

func (x *TaskRequestContext) GetIsInternalTask() bool {
	if x != nil && x.IsInternalTask != nil {
		return *x.IsInternalTask
	}
	return false
}

type EntitySyncEntityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the entity across sync sites. It could be either a
	// name or a UUID.
	Uid *string `protobuf:"bytes,1,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	// Type of the entity.
	EntityType *EntitySyncEntityType_Type `protobuf:"varint,2,opt,name=entity_type,json=entityType,proto3,enum=EntitySyncEntityType_Type,oneof" json:"entity_type,omitempty"`
	// Name of the entity as should be displayed on UI.
	DisplayName *string                       `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	Payload     *EntitySyncEntityInfo_Payload `protobuf:"bytes,4,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
	// Checksum of the entity. It is used to identify conflicts across syncs.
	Checksum *string `protobuf:"bytes,5,opt,name=checksum,proto3,oneof" json:"checksum,omitempty"`
	// Sequence id.
	SeqId  *int32                                  `protobuf:"varint,6,opt,name=seq_id,json=seqId,proto3,oneof" json:"seq_id,omitempty"`
	OpType *EntitySyncEntityInfo_SyncOperationType `protobuf:"varint,7,opt,name=op_type,json=opType,proto3,enum=EntitySyncEntityInfo_SyncOperationType,oneof" json:"op_type,omitempty"`
	// URLs/cluster uuid of the Availabilty Zones to which the entity should be
	// synced. Only required in case of selective syncing to particular AZs.
	AvailabilityZoneUrlList []string                          `protobuf:"bytes,8,rep,name=availability_zone_url_list,json=availabilityZoneUrlList,proto3" json:"availability_zone_url_list,omitempty"`
	State                   *EntitySyncEntityInfo_EntityState `protobuf:"varint,9,opt,name=state,proto3,enum=EntitySyncEntityInfo_EntityState,oneof" json:"state,omitempty"`
}

func (x *EntitySyncEntityInfo) Reset() {
	*x = EntitySyncEntityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cyclops_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntitySyncEntityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitySyncEntityInfo) ProtoMessage() {}

func (x *EntitySyncEntityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cyclops_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitySyncEntityInfo.ProtoReflect.Descriptor instead.
func (*EntitySyncEntityInfo) Descriptor() ([]byte, []int) {
	return file_cyclops_proto_rawDescGZIP(), []int{3}
}

func (x *EntitySyncEntityInfo) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *EntitySyncEntityInfo) GetEntityType() EntitySyncEntityType_Type {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return EntitySyncEntityType_kCategory
}

func (x *EntitySyncEntityInfo) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *EntitySyncEntityInfo) GetPayload() *EntitySyncEntityInfo_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *EntitySyncEntityInfo) GetChecksum() string {
	if x != nil && x.Checksum != nil {
		return *x.Checksum
	}
	return ""
}

func (x *EntitySyncEntityInfo) GetSeqId() int32 {
	if x != nil && x.SeqId != nil {
		return *x.SeqId
	}
	return 0
}

func (x *EntitySyncEntityInfo) GetOpType() EntitySyncEntityInfo_SyncOperationType {
	if x != nil && x.OpType != nil {
		return *x.OpType
	}
	return EntitySyncEntityInfo_kUpdate
}

func (x *EntitySyncEntityInfo) GetAvailabilityZoneUrlList() []string {
	if x != nil {
		return x.AvailabilityZoneUrlList
	}
	return nil
}

func (x *EntitySyncEntityInfo) GetState() EntitySyncEntityInfo_EntityState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return EntitySyncEntityInfo_kComplete
}

type ExecuteEntitySyncArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task context for task based RPC.
	TaskRequestContext *TaskRequestContext `protobuf:"bytes,1,opt,name=task_request_context,json=taskRequestContext,proto3,oneof" json:"task_request_context,omitempty"`
	// List of entity information used to do validations and updates on the
	// remote site.
	EntityInfoList []*EntitySyncEntityInfo `protobuf:"bytes,2,rep,name=entity_info_list,json=entityInfoList,proto3" json:"entity_info_list,omitempty"`
	// Indicates whether to override entities(if feasible) in case of conflicts.
	ShouldOverride *bool `protobuf:"varint,3,opt,name=should_override,json=shouldOverride,proto3,oneof" json:"should_override,omitempty"`
	// Cluster uuid of the PC pointed by the source Availability Zone.
	SourceClusterUuid *string `protobuf:"bytes,4,opt,name=source_cluster_uuid,json=sourceClusterUuid,proto3,oneof" json:"source_cluster_uuid,omitempty"`
	// List of AZs connected to source AZ. This will help in determining if
	// update need to be cascaded from local AZ to other AZs connected to local
	// AZ or not.
	// For example- A is connected to B and C, and B is also connected to C. If
	// update happens at A, then the ExecuteEntitySyncArg for B and C will have
	// source_connected_to_az_list set to A, B and C. This way we can determine
	// at B that update need not be cascaded to C.
	SourceConnectedToAzList []string `protobuf:"bytes,5,rep,name=source_connected_to_az_list,json=sourceConnectedToAzList,proto3" json:"source_connected_to_az_list,omitempty"`
}

func (x *ExecuteEntitySyncArg) Reset() {
	*x = ExecuteEntitySyncArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cyclops_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteEntitySyncArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteEntitySyncArg) ProtoMessage() {}

func (x *ExecuteEntitySyncArg) ProtoReflect() protoreflect.Message {
	mi := &file_cyclops_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteEntitySyncArg.ProtoReflect.Descriptor instead.
func (*ExecuteEntitySyncArg) Descriptor() ([]byte, []int) {
	return file_cyclops_proto_rawDescGZIP(), []int{4}
}

func (x *ExecuteEntitySyncArg) GetTaskRequestContext() *TaskRequestContext {
	if x != nil {
		return x.TaskRequestContext
	}
	return nil
}

func (x *ExecuteEntitySyncArg) GetEntityInfoList() []*EntitySyncEntityInfo {
	if x != nil {
		return x.EntityInfoList
	}
	return nil
}

func (x *ExecuteEntitySyncArg) GetShouldOverride() bool {
	if x != nil && x.ShouldOverride != nil {
		return *x.ShouldOverride
	}
	return false
}

func (x *ExecuteEntitySyncArg) GetSourceClusterUuid() string {
	if x != nil && x.SourceClusterUuid != nil {
		return *x.SourceClusterUuid
	}
	return ""
}

func (x *ExecuteEntitySyncArg) GetSourceConnectedToAzList() []string {
	if x != nil {
		return x.SourceConnectedToAzList
	}
	return nil
}

type ExecuteEntitySyncRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the task to poll for completion. On success, the task will contain
	// a EntitySyncExecuteTaskRet.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid,proto3,oneof" json:"task_uuid,omitempty"`
}

func (x *ExecuteEntitySyncRet) Reset() {
	*x = ExecuteEntitySyncRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cyclops_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteEntitySyncRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteEntitySyncRet) ProtoMessage() {}

func (x *ExecuteEntitySyncRet) ProtoReflect() protoreflect.Message {
	mi := &file_cyclops_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteEntitySyncRet.ProtoReflect.Descriptor instead.
func (*ExecuteEntitySyncRet) Descriptor() ([]byte, []int) {
	return file_cyclops_proto_rawDescGZIP(), []int{5}
}

func (x *ExecuteEntitySyncRet) GetTaskUuid() []byte {
	if x != nil {
		return x.TaskUuid
	}
	return nil
}

type TriggerEntitySyncArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: Populate this arg with any other parameters desired for Entity Sync.
	// Task context for task based RPC.
	TaskRequestContext *TaskRequestContext `protobuf:"bytes,1,opt,name=task_request_context,json=taskRequestContext,proto3,oneof" json:"task_request_context,omitempty"`
	// Indicates whether to override entities(if feasible) in case of conflicts.
	ShouldOverride *bool `protobuf:"varint,2,opt,name=should_override,json=shouldOverride,proto3,oneof" json:"should_override,omitempty"`
	// List of all the entities for which EntitySync is being triggered. If None,
	// then EntitySync needs to be triggered for all entities.
	EntityList []*EntitySyncEntity `protobuf:"bytes,3,rep,name=entity_list,json=entityList,proto3" json:"entity_list,omitempty"`
}

func (x *TriggerEntitySyncArg) Reset() {
	*x = TriggerEntitySyncArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cyclops_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerEntitySyncArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerEntitySyncArg) ProtoMessage() {}

func (x *TriggerEntitySyncArg) ProtoReflect() protoreflect.Message {
	mi := &file_cyclops_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerEntitySyncArg.ProtoReflect.Descriptor instead.
func (*TriggerEntitySyncArg) Descriptor() ([]byte, []int) {
	return file_cyclops_proto_rawDescGZIP(), []int{6}
}

func (x *TriggerEntitySyncArg) GetTaskRequestContext() *TaskRequestContext {
	if x != nil {
		return x.TaskRequestContext
	}
	return nil
}

func (x *TriggerEntitySyncArg) GetShouldOverride() bool {
	if x != nil && x.ShouldOverride != nil {
		return *x.ShouldOverride
	}
	return false
}

func (x *TriggerEntitySyncArg) GetEntityList() []*EntitySyncEntity {
	if x != nil {
		return x.EntityList
	}
	return nil
}

type TriggerEntitySyncRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the task created for handling request.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid,proto3,oneof" json:"task_uuid,omitempty"`
}

func (x *TriggerEntitySyncRet) Reset() {
	*x = TriggerEntitySyncRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cyclops_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerEntitySyncRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerEntitySyncRet) ProtoMessage() {}

func (x *TriggerEntitySyncRet) ProtoReflect() protoreflect.Message {
	mi := &file_cyclops_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerEntitySyncRet.ProtoReflect.Descriptor instead.
func (*TriggerEntitySyncRet) Descriptor() ([]byte, []int) {
	return file_cyclops_proto_rawDescGZIP(), []int{7}
}

func (x *TriggerEntitySyncRet) GetTaskUuid() []byte {
	if x != nil {
		return x.TaskUuid
	}
	return nil
}

type TriggerEntitySyncAZArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task context for task based RPC.
	TaskRequestContext *TaskRequestContext `protobuf:"bytes,1,opt,name=task_request_context,json=taskRequestContext,proto3,oneof" json:"task_request_context,omitempty"`
	// Name of the connected Availability Zone.
	AvailabilityZoneName *string `protobuf:"bytes,2,opt,name=availability_zone_name,json=availabilityZoneName,proto3,oneof" json:"availability_zone_name,omitempty"`
	// Cluster uuid of the PC pointed by the Availability Zone.
	RemoteClusterUuid *string `protobuf:"bytes,3,opt,name=remote_cluster_uuid,json=remoteClusterUuid,proto3,oneof" json:"remote_cluster_uuid,omitempty"`
	// Entity information that needs to be synced.
	EntityInfoList []*EntitySyncEntityInfo `protobuf:"bytes,4,rep,name=entity_info_list,json=entityInfoList,proto3" json:"entity_info_list,omitempty"`
	// Indicates whether to override entities(if feasible) in case of conflicts.
	ShouldOverride *bool `protobuf:"varint,5,opt,name=should_override,json=shouldOverride,proto3,oneof" json:"should_override,omitempty"`
	// List of all the entities for which EntitySync is being triggered. If None,
	// then EntitySync needs to be triggered for all entities. It differs from
	// entity_info_list as entity_info_list may have category payload and in case
	// of Delete, the corresponding payload may not be there. This field just
	// indicates for which uids the EntitySync was triggered.
	EntityList []*EntitySyncEntity `protobuf:"bytes,6,rep,name=entity_list,json=entityList,proto3" json:"entity_list,omitempty"`
}

func (x *TriggerEntitySyncAZArg) Reset() {
	*x = TriggerEntitySyncAZArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cyclops_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerEntitySyncAZArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerEntitySyncAZArg) ProtoMessage() {}

func (x *TriggerEntitySyncAZArg) ProtoReflect() protoreflect.Message {
	mi := &file_cyclops_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerEntitySyncAZArg.ProtoReflect.Descriptor instead.
func (*TriggerEntitySyncAZArg) Descriptor() ([]byte, []int) {
	return file_cyclops_proto_rawDescGZIP(), []int{8}
}

func (x *TriggerEntitySyncAZArg) GetTaskRequestContext() *TaskRequestContext {
	if x != nil {
		return x.TaskRequestContext
	}
	return nil
}

func (x *TriggerEntitySyncAZArg) GetAvailabilityZoneName() string {
	if x != nil && x.AvailabilityZoneName != nil {
		return *x.AvailabilityZoneName
	}
	return ""
}

func (x *TriggerEntitySyncAZArg) GetRemoteClusterUuid() string {
	if x != nil && x.RemoteClusterUuid != nil {
		return *x.RemoteClusterUuid
	}
	return ""
}

func (x *TriggerEntitySyncAZArg) GetEntityInfoList() []*EntitySyncEntityInfo {
	if x != nil {
		return x.EntityInfoList
	}
	return nil
}

func (x *TriggerEntitySyncAZArg) GetShouldOverride() bool {
	if x != nil && x.ShouldOverride != nil {
		return *x.ShouldOverride
	}
	return false
}

func (x *TriggerEntitySyncAZArg) GetEntityList() []*EntitySyncEntity {
	if x != nil {
		return x.EntityList
	}
	return nil
}

type TriggerEntitySyncAZRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the task created for handling request.
	TaskUuid []byte `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid,proto3,oneof" json:"task_uuid,omitempty"`
}

func (x *TriggerEntitySyncAZRet) Reset() {
	*x = TriggerEntitySyncAZRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cyclops_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerEntitySyncAZRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerEntitySyncAZRet) ProtoMessage() {}

func (x *TriggerEntitySyncAZRet) ProtoReflect() protoreflect.Message {
	mi := &file_cyclops_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerEntitySyncAZRet.ProtoReflect.Descriptor instead.
func (*TriggerEntitySyncAZRet) Descriptor() ([]byte, []int) {
	return file_cyclops_proto_rawDescGZIP(), []int{9}
}

func (x *TriggerEntitySyncAZRet) GetTaskUuid() []byte {
	if x != nil {
		return x.TaskUuid
	}
	return nil
}

type TriggerEntitySyncAZTaskRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This list does not need to be of same size as entity_info_list of
	// TriggerEntitySyncAZArg since in the TriggerEntitySyncAZ some of the
	// payload maybe removed(PluginNotFound or NotSupported) or added (Deletes).
	SyncEntityResponseList []*TriggerEntitySyncAZTaskRet_SyncEntityResponseInfo `protobuf:"bytes,1,rep,name=sync_entity_response_list,json=syncEntityResponseList,proto3" json:"sync_entity_response_list,omitempty"`
}

func (x *TriggerEntitySyncAZTaskRet) Reset() {
	*x = TriggerEntitySyncAZTaskRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cyclops_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerEntitySyncAZTaskRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerEntitySyncAZTaskRet) ProtoMessage() {}

func (x *TriggerEntitySyncAZTaskRet) ProtoReflect() protoreflect.Message {
	mi := &file_cyclops_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerEntitySyncAZTaskRet.ProtoReflect.Descriptor instead.
func (*TriggerEntitySyncAZTaskRet) Descriptor() ([]byte, []int) {
	return file_cyclops_proto_rawDescGZIP(), []int{10}
}

func (x *TriggerEntitySyncAZTaskRet) GetSyncEntityResponseList() []*TriggerEntitySyncAZTaskRet_SyncEntityResponseInfo {
	if x != nil {
		return x.SyncEntityResponseList
	}
	return nil
}

// Payload of the entity.
type EntitySyncEntityInfo_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is expected to be the spec of the entity. EntitySync relies on this
	// field to get the spec. If any other data needs to be synced then add a
	// field as part of this message.
	Spec *string `protobuf:"bytes,1,opt,name=spec,proto3,oneof" json:"spec,omitempty"`
	// Needed to maintain different UUID for the same entity on different
	// AZs.
	RemoteEntityUid *string `protobuf:"bytes,2,opt,name=remote_entity_uid,json=remoteEntityUid,proto3,oneof" json:"remote_entity_uid,omitempty"`
}

func (x *EntitySyncEntityInfo_Payload) Reset() {
	*x = EntitySyncEntityInfo_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cyclops_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntitySyncEntityInfo_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitySyncEntityInfo_Payload) ProtoMessage() {}

func (x *EntitySyncEntityInfo_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_cyclops_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitySyncEntityInfo_Payload.ProtoReflect.Descriptor instead.
func (*EntitySyncEntityInfo_Payload) Descriptor() ([]byte, []int) {
	return file_cyclops_proto_rawDescGZIP(), []int{3, 0}
}

func (x *EntitySyncEntityInfo_Payload) GetSpec() string {
	if x != nil && x.Spec != nil {
		return *x.Spec
	}
	return ""
}

func (x *EntitySyncEntityInfo_Payload) GetRemoteEntityUid() string {
	if x != nil && x.RemoteEntityUid != nil {
		return *x.RemoteEntityUid
	}
	return ""
}

// This SyncEntityResponseInfo is different from the one in
// entity_sync_types.proto even though the name is same.
type TriggerEntitySyncAZTaskRet_SyncEntityResponseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the entity across sync sites. It could be either a
	// name or a UUID.
	Uid *string `protobuf:"bytes,1,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	// An error code indicating whether the sync was successful for the entity.
	Error *string `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	// Sequence id.
	SeqId *int32 `protobuf:"varint,3,opt,name=seq_id,json=seqId,proto3,oneof" json:"seq_id,omitempty"`
}

func (x *TriggerEntitySyncAZTaskRet_SyncEntityResponseInfo) Reset() {
	*x = TriggerEntitySyncAZTaskRet_SyncEntityResponseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cyclops_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerEntitySyncAZTaskRet_SyncEntityResponseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerEntitySyncAZTaskRet_SyncEntityResponseInfo) ProtoMessage() {}

func (x *TriggerEntitySyncAZTaskRet_SyncEntityResponseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cyclops_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerEntitySyncAZTaskRet_SyncEntityResponseInfo.ProtoReflect.Descriptor instead.
func (*TriggerEntitySyncAZTaskRet_SyncEntityResponseInfo) Descriptor() ([]byte, []int) {
	return file_cyclops_proto_rawDescGZIP(), []int{10, 0}
}

func (x *TriggerEntitySyncAZTaskRet_SyncEntityResponseInfo) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *TriggerEntitySyncAZTaskRet_SyncEntityResponseInfo) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *TriggerEntitySyncAZTaskRet_SyncEntityResponseInfo) GetSeqId() int32 {
	if x != nil && x.SeqId != nil {
		return *x.SeqId
	}
	return 0
}

var File_cyclops_proto protoreflect.FileDescriptor

var file_cyclops_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x9f, 0x01, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x46, 0x6c, 0x6f,
	0x77, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x46, 0x6c,
	0x6f, 0x77, 0x53, 0x79, 0x6e, 0x63, 0x4a, 0x6f, 0x62, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x6b,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x05, 0x12, 0x11,
	0x0a, 0x0d, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10,
	0x06, 0x22, 0x83, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a,
	0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01,
	0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x55,
	0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x11, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x69,
	0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0e, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x75, 0x62,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x22, 0xbc, 0x06, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x03, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05,
	0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x06, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x07, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x72, 0x0a, 0x07,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x69, 0x64,
	0x22, 0x3e, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x6b, 0x53, 0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x02,
	0x22, 0x4f, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x6b, 0x53, 0x6b, 0x69, 0x70, 0x10,
	0x04, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x89, 0x03, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x72, 0x67, 0x12, 0x4a, 0x0a,
	0x14, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x48, 0x00, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x10, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a,
	0x1b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x7a, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x17, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x54, 0x6f, 0x41, 0x7a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x22, 0x46, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22, 0xf1, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x72,
	0x67, 0x12, 0x4a, 0x0a, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x46, 0x0a, 0x14,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x55,
	0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x22, 0xd7, 0x03, 0x0a, 0x16, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x5a, 0x41, 0x72, 0x67, 0x12,
	0x4a, 0x0a, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x48, 0x00, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x14, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x10, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79,
	0x6e, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0f,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0b, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x48,
	0x0a, 0x16, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53,
	0x79, 0x6e, 0x63, 0x41, 0x5a, 0x52, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x22, 0x91, 0x02, 0x0a, 0x1a, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x5a,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x74, 0x12, 0x6d, 0x0a, 0x19, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x5a,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x74, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16,
	0x73, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x83, 0x01, 0x0a, 0x16, 0x53, 0x79, 0x6e, 0x63, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x32, 0xde, 0x01, 0x0a,
	0x0d, 0x43, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x73, 0x52, 0x70, 0x63, 0x53, 0x76, 0x63, 0x12, 0x41,
	0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x15, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x72, 0x67, 0x1a, 0x15, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x74, 0x12, 0x41, 0x0a, 0x11, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x15, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x72, 0x67, 0x1a, 0x15, 0x2e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x74, 0x12, 0x47, 0x0a, 0x13, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x5a, 0x12, 0x17, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x41,
	0x5a, 0x41, 0x72, 0x67, 0x1a, 0x17, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x5a, 0x52, 0x65, 0x74, 0x42, 0x23, 0x5a,
	0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x38, 0x30, 0x61, 0x73,
	0x69, 0x73, 0x2f, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x73, 0x2f, 0x63, 0x79, 0x63, 0x6c, 0x6f,
	0x70, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cyclops_proto_rawDescOnce sync.Once
	file_cyclops_proto_rawDescData = file_cyclops_proto_rawDesc
)

func file_cyclops_proto_rawDescGZIP() []byte {
	file_cyclops_proto_rawDescOnce.Do(func() {
		file_cyclops_proto_rawDescData = protoimpl.X.CompressGZIP(file_cyclops_proto_rawDescData)
	})
	return file_cyclops_proto_rawDescData
}

var file_cyclops_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cyclops_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_cyclops_proto_goTypes = []interface{}{
	(EntitySyncEntityType_Type)(0),                            // 0: EntitySyncEntityType.Type
	(EntitySyncEntityInfo_SyncOperationType)(0),               // 1: EntitySyncEntityInfo.SyncOperationType
	(EntitySyncEntityInfo_EntityState)(0),                     // 2: EntitySyncEntityInfo.EntityState
	(*EntitySyncEntityType)(nil),                              // 3: EntitySyncEntityType
	(*EntitySyncEntity)(nil),                                  // 4: EntitySyncEntity
	(*TaskRequestContext)(nil),                                // 5: TaskRequestContext
	(*EntitySyncEntityInfo)(nil),                              // 6: EntitySyncEntityInfo
	(*ExecuteEntitySyncArg)(nil),                              // 7: ExecuteEntitySyncArg
	(*ExecuteEntitySyncRet)(nil),                              // 8: ExecuteEntitySyncRet
	(*TriggerEntitySyncArg)(nil),                              // 9: TriggerEntitySyncArg
	(*TriggerEntitySyncRet)(nil),                              // 10: TriggerEntitySyncRet
	(*TriggerEntitySyncAZArg)(nil),                            // 11: TriggerEntitySyncAZArg
	(*TriggerEntitySyncAZRet)(nil),                            // 12: TriggerEntitySyncAZRet
	(*TriggerEntitySyncAZTaskRet)(nil),                        // 13: TriggerEntitySyncAZTaskRet
	(*EntitySyncEntityInfo_Payload)(nil),                      // 14: EntitySyncEntityInfo.Payload
	(*TriggerEntitySyncAZTaskRet_SyncEntityResponseInfo)(nil), // 15: TriggerEntitySyncAZTaskRet.SyncEntityResponseInfo
}
var file_cyclops_proto_depIdxs = []int32{
	0,  // 0: EntitySyncEntity.entity_type:type_name -> EntitySyncEntityType.Type
	0,  // 1: EntitySyncEntityInfo.entity_type:type_name -> EntitySyncEntityType.Type
	14, // 2: EntitySyncEntityInfo.payload:type_name -> EntitySyncEntityInfo.Payload
	1,  // 3: EntitySyncEntityInfo.op_type:type_name -> EntitySyncEntityInfo.SyncOperationType
	2,  // 4: EntitySyncEntityInfo.state:type_name -> EntitySyncEntityInfo.EntityState
	5,  // 5: ExecuteEntitySyncArg.task_request_context:type_name -> TaskRequestContext
	6,  // 6: ExecuteEntitySyncArg.entity_info_list:type_name -> EntitySyncEntityInfo
	5,  // 7: TriggerEntitySyncArg.task_request_context:type_name -> TaskRequestContext
	4,  // 8: TriggerEntitySyncArg.entity_list:type_name -> EntitySyncEntity
	5,  // 9: TriggerEntitySyncAZArg.task_request_context:type_name -> TaskRequestContext
	6,  // 10: TriggerEntitySyncAZArg.entity_info_list:type_name -> EntitySyncEntityInfo
	4,  // 11: TriggerEntitySyncAZArg.entity_list:type_name -> EntitySyncEntity
	15, // 12: TriggerEntitySyncAZTaskRet.sync_entity_response_list:type_name -> TriggerEntitySyncAZTaskRet.SyncEntityResponseInfo
	7,  // 13: CyclopsRpcSvc.ExecuteEntitySync:input_type -> ExecuteEntitySyncArg
	9,  // 14: CyclopsRpcSvc.TriggerEntitySync:input_type -> TriggerEntitySyncArg
	11, // 15: CyclopsRpcSvc.TriggerEntitySyncAZ:input_type -> TriggerEntitySyncAZArg
	8,  // 16: CyclopsRpcSvc.ExecuteEntitySync:output_type -> ExecuteEntitySyncRet
	10, // 17: CyclopsRpcSvc.TriggerEntitySync:output_type -> TriggerEntitySyncRet
	12, // 18: CyclopsRpcSvc.TriggerEntitySyncAZ:output_type -> TriggerEntitySyncAZRet
	16, // [16:19] is the sub-list for method output_type
	13, // [13:16] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_cyclops_proto_init() }
func file_cyclops_proto_init() {
	if File_cyclops_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cyclops_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntitySyncEntityType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cyclops_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntitySyncEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cyclops_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRequestContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cyclops_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntitySyncEntityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cyclops_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteEntitySyncArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cyclops_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteEntitySyncRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cyclops_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerEntitySyncArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cyclops_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerEntitySyncRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cyclops_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerEntitySyncAZArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cyclops_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerEntitySyncAZRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cyclops_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerEntitySyncAZTaskRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cyclops_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntitySyncEntityInfo_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cyclops_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerEntitySyncAZTaskRet_SyncEntityResponseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cyclops_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_cyclops_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_cyclops_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_cyclops_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_cyclops_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_cyclops_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_cyclops_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_cyclops_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_cyclops_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_cyclops_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_cyclops_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cyclops_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cyclops_proto_goTypes,
		DependencyIndexes: file_cyclops_proto_depIdxs,
		EnumInfos:         file_cyclops_proto_enumTypes,
		MessageInfos:      file_cyclops_proto_msgTypes,
	}.Build()
	File_cyclops_proto = out.File
	file_cyclops_proto_rawDesc = nil
	file_cyclops_proto_goTypes = nil
	file_cyclops_proto_depIdxs = nil
}
